gain <- as.numeric(list[3])
if (list[2] == "lose") {
gain <- gain * -1
}
c(list[1], gain, list[4])
}
)
bar <- lapply(foo, function(list) {
gain <- as.numeric(list[3])
if (list[2] == "lose") {
gain <- gain * -1
}
c(list[1], gain, list[4])
}
)
library(stringr)
con = file("input", "r")
lines <- lapply(readLines(con), function(line) {
str_match_all(line, "([A-Za-z]+) would (gain|lose) ([:digit:]+) happiness units by sitting next to ([A-Za-z]+)")[[1]][,-1]
})
rules <- lapply(lines, function(list) {
gain <- as.numeric(list[3])
if (list[2] == "lose") {
gain <- gain * -1
}
c(list[1], gain, list[4])
})
source('~/repos/projects/advent-of-code/2015/13/13.R')
rules <- lapply(rules, function(rule) c(rule[1], rule[3], rule[2]))
cbind(rules)
lapply(rules, function(rule) unlist(c(rule[1], rule[3], rule[2])))
cbind(lapply(rules, function(rule) unlist(c(rule[1], rule[3], rule[2]))))
rules <- lapply(rules, function(rule) c(from=rule[1], to=rule[3], gain=rule[2]))
rules
dim(rules) <- c(56,3)
rules
lapply(rules, function(rule) rule["from"])
sapply(rules, function(rule) rule["from"])
abc <- sapply(rules, function(rule) rule["from"])
data.frame(
from = sapply(rules, function(rule) rule["from"]),
to = sapply(rules, function(rule) rule["to"]),
gain = sapply(rules, function(rule) rule["gain"])
)
library(gtools)
library(stringr)
con = file("input", "r")
lines <- lapply(readLines(con), function(line) {
str_match_all(line, "([A-Za-z]+) would (gain|lose) ([:digit:]+) happiness units by sitting next to ([A-Za-z]+)")[[1]][,-1]
})
rules <- lapply(lines, function(list) {
gain <- as.numeric(list[3])
if (list[2] == "lose") {
gain <- gain * -1
}
c(from=list[1], gain=gain, to=list[4])
})
lookup <- data.frame(
from = sapply(rules, function(rule) rule["from"])
to = sapply(rules, function(rule) rule["to"])
gain = sapply(rules, function(rule) rule["gain"])
)
gain <- as.numeric(list[3])
library(gtools)
library(stringr)
con = file("input", "r")
lines <- lapply(readLines(con), function(line) {
str_match_all(line, "([A-Za-z]+) would (gain|lose) ([:digit:]+) happiness units by sitting next to ([A-Za-z]+)")[[1]][,-1]
})
rules <- lapply(lines, function(list) {
gain <- as.numeric(list[3])
if (list[2] == "lose") {
gain <- gain * -1
}
c(from=list[1], gain=gain, to=list[4])
})
lookup <- data.frame(
from = sapply(rules, function(rule) rule["from"]),
to = sapply(rules, function(rule) rule["to"]),
gain = sapply(rules, function(rule) rule["gain"])
)
lookup
df.loc[(df['from'] == 'Alice') & df['to'] == 'Bob')]
df.loc[(df['from'] == 'Alice') & df['to'] == 'Bob']
lookup.loc[(lookup['from'] == 'Alice') & (lookup['to'] == 'Bob')]
lookup[ which(lookup$from=="Alice"& lookup$to == "Bob"), ]
lookup[ which(lookup$from=="Alice"& lookup$to == "Bob"), ]['gain']
lookup[ which(lookup$from=="Alice"& lookup$to == "Bob"), ]['gain'].iloc(0)
lookup[ which(lookup$from=="Alice"& lookup$to == "Bob"), ]['gain']
lookup[ which(lookup$from=="Alice"& lookup$to == "Bob"), ]$gain
lookup[ which(lookup$from=="Alice"& lookup$to == "Bob"), ]['gain'] == 2
lookup[ which(lookup$from=="Alice"& lookup$to == "Bob"), ]['gain'] == 1
gain <- function(from, to) {
lookup[which(lookup$from==from & lookup$to == to), ]['gain']
}
gain('Alice', 'Bob')
unique(lookup$from)
length(unique(lookup$from))
unique(lookup$from)[2:]
unique(lookup$from)[1:]
unique(lookup$from)[1,]
unique(lookup$from)[1,-1]
unique(lookup$from)[1,]
unique(lookup$from)[{1,]]
unique(lookup$from)[[1,]]
unique(lookup$from)
k <- unique(lookup$from)
c(unique(lookup$from))
levels(unique(lookup$from))
levels(unique(lookup$from))[1,]
levels(unique(lookup$from))
typeof(levels(unique(lookup$from)))
levels(unique(lookup$from))
levels(unique(lookup$from))[1:]
k <0 levels(unique(lookup$from))
k <- levels(unique(lookup$from))
k <- levels(unique(lookup$from))[2:]
k <- levels(unique(lookup$from))[2,]
k <- levels(unique(lookup$from))[2]
k <- levels(unique(lookup$from))
k[2:]
k[2,]
k[]
k[2]
k[-1]
permutations(k[-1])
permutations(7, 7, k[-1])
k
k[0]
k[1]
c(k, k)
c(k, k)
library(gtools)
library(stringr)
con = file("input", "r")
lines <- lapply(readLines(con), function(line) {
str_match_all(line, "([A-Za-z]+) would (gain|lose) ([:digit:]+) happiness units by sitting next to ([A-Za-z]+)")[[1]][,-1]
})
rules <- lapply(lines, function(list) {
gain <- as.numeric(list[3])
if (list[2] == "lose") {
gain <- gain * -1
}
c(from=list[1], gain=gain, to=list[4])
})
lookup <- data.frame(
from = sapply(rules, function(rule) rule["from"]),
to = sapply(rules, function(rule) rule["to"]),
gain = sapply(rules, function(rule) rule["gain"])
)
gain <- function(from, to) {
lookup[which(lookup$from==from & lookup$to == to), ]['gain']
}
people <- levels(unique(lookup$from))
seats <- people[-1]
seatings <- c(people[1], permutations(length(seats), length(seats), seats))
matrix(rep(people[1],each=100),nrow=100)
library(gtools)
library(stringr)
con = file("input", "r")
lines <- lapply(readLines(con), function(line) {
str_match_all(line, "([A-Za-z]+) would (gain|lose) ([:digit:]+) happiness units by sitting next to ([A-Za-z]+)")[[1]][,-1]
})
rules <- lapply(lines, function(list) {
gain <- as.numeric(list[3])
if (list[2] == "lose") {
gain <- gain * -1
}
c(from=list[1], gain=gain, to=list[4])
})
lookup <- data.frame(
from = sapply(rules, function(rule) rule["from"]),
to = sapply(rules, function(rule) rule["to"]),
gain = sapply(rules, function(rule) rule["gain"])
)
gain <- function(from, to) {
lookup[which(lookup$from==from & lookup$to == to), ]['gain']
}
people <- levels(unique(lookup$from))
seats <- people[-1]
# circular permuations
seatings <- permutations(length(seats), length(seats), seats)
first_person <- matrix(rep(people[1],each=length(seatings)),nrow=length(seatings))
all_seatings = cbind(seatings, first_person)
nrow(seatings)
rep(people[1], nrow(seatings))
nrow(rep(people[1], nrow(seatings)))
matrix(rep(people[1], nrow(seatings)))
library(gtools)
library(stringr)
con = file("input", "r")
lines <- lapply(readLines(con), function(line) {
str_match_all(line, "([A-Za-z]+) would (gain|lose) ([:digit:]+) happiness units by sitting next to ([A-Za-z]+)")[[1]][,-1]
})
rules <- lapply(lines, function(list) {
gain <- as.numeric(list[3])
if (list[2] == "lose") {
gain <- gain * -1
}
c(from=list[1], gain=gain, to=list[4])
})
lookup <- data.frame(
from = sapply(rules, function(rule) rule["from"]),
to = sapply(rules, function(rule) rule["to"]),
gain = sapply(rules, function(rule) rule["gain"])
)
gain <- function(from, to) {
lookup[which(lookup$from==from & lookup$to == to), ]['gain']
}
people <- levels(unique(lookup$from))
seats <- people[-1]
# circular permuations
seatings <- permutations(length(seats), length(seats), seats)
first_person <- matrix(rep(people[1], nrow(seatings)))
all_seatings = cbind(seatings, first_person)
View(all_seatings)
row <- all_seatings[1,]
cbind(row, c(row[-1], row[1]))
cbind(row, c(row[-1], row[1]))[4,1]
pairs <- cbind(row, c(row[-1], row[1]))
apply(pairs, 1, function(pair) { gain(pair[1], pair[2]) + gain(pair[2], pair[1]) }
)
apply(pairs, 1, function(pair) { pair[1] } )
apply(pairs, 1, function(pair) { gain(pair[2], pair[1]) } )
apply(pairs, 1, function(pair) { as.numeric(gain(pair[2], pair[1])) } )
gain <- function(from, to) {
as.numeric(lookup[which(lookup$from==from & lookup$to == to), ]['gain'])
}
apply(pairs, 1, function(pair) { gain(pair[2], pair[1]) } )
apply(pairs, 1, function(pair) { gain(pair[1], pair[2]) + gain(pair[2], pair[1]) }
)
apply(pairs, 1, function(pair) { gain(pair[2], pair[1]) } )
apply(pairs, 1, function(pair) { gain(pair[1], pair[2]) } )
pairs[1,]
lookup[which(lookup$from=='Bob' & lookup$to == 'Carol'), ]['gain']
as.numeric(lookup[which(lookup$from=='Bob' & lookup$to == 'Carol'), ]['gain'])
lookup[which(lookup$from=='Bob' & lookup$to == 'Carol'), ]['gain']
lookup[which(lookup$from=='Bob' & lookup$to == 'Carol'), ]['gain']
lookup[which(lookup$from=='Bob' & lookup$to == 'Carol'), ]['gain'] + lookup[which(lookup$from=='Carol' & lookup$to == 'Bob'), ]['gain']
p <- lookup[which(lookup$from=='Bob' & lookup$to == 'Carol'), ]['gain']
p <- lookup[which(lookup$from=='Bob' & lookup$to == 'Carol'), ]['gain'][0]
p <- lookup[which(lookup$from=='Bob' & lookup$to == 'Carol'), ]['gain']
p[0]
p
p[9]
p[gain]
p$gain
p
typeof(p)
sum(lookup[which(lookup$from=='Bob' & lookup$to == 'Carol'), ]['gain'])
lookup[which(lookup$from=='Bob' & lookup$to == 'Carol'), ]['gain']
lookup[which(lookup$from=='Bob' & lookup$to == 'Carol'), ]['gain']$gain
lookup[which(lookup$from=='Bob' & lookup$to == 'Carol'), ]$gain
lookup[which(lookup$from=='Bob' & lookup$to == 'Carol'), ]$gain == -61
lookup[which(lookup$from=='Bob' & lookup$to == 'Carol'), ]$gain + lookup[which(lookup$from=='Carol' & lookup$to == 'Bob'), ]$gain
lookup[which(lookup$from=='Carol' & lookup$to == 'Bob'), ]$gain
lookup[which(lookup$from=='Carol' & lookup$to == 'Bob'), ]$gain[)]
lookup[which(lookup$from=='Carol' & lookup$to == 'Bob'), ]$gain[1]
lookup[which(lookup$from=='Bob' & lookup$to == 'Carol'), ]$gain[1] + lookup[which(lookup$from=='Carol' & lookup$to == 'Bob'), ]$gain[1]
unlist(lookup[which(lookup$from=='Carol' & lookup$to == 'Bob'), ]$gain)
unlist(lookup[which(lookup$from=='Carol' & lookup$to == 'Bob'), ]$gain)[1]
as.numeric(lookup[which(lookup$from=='Carol' & lookup$to == 'Bob'), ]$gain)
as.numeric(lookup{[which(lookup$from=='Carol' & lookup$to == 'Bob'), ]]$gain)
as.numeric(lookup[[which(lookup$from=='Carol' & lookup$to == 'Bob'), ]]$gain)
which(lookup$from=='Carol' & lookup$to == 'Bob')
as.numeric(lookup[which(lookup$from=='Carol' & lookup$to == 'Bob'), ]$gain)
lookup[which(lookup$from=='Carol' & lookup$to == 'Bob'), ]
lookup[which(lookup$from=='Carol' & lookup$to == 'Bob'),'gain']
as.numeric(lookup[which(lookup$from=='Carol' & lookup$to == 'Bob'),'gain'])
lookup[which(lookup$from=='Carol' & lookup$to == 'Bob'),'gain'][1]
typeof(lookup[which(lookup$from=='Carol' & lookup$to == 'Bob'),'gain'])
length(lookup[which(lookup$from=='Carol' & lookup$to == 'Bob'),'gain'])
lookup[which(lookup$from=='Carol' & lookup$to == 'Bob'),'gain']
lookup[which(lookup$from=='Carol' & lookup$to == 'Bob'),'gain'] + 1
as.numeric(as.character((lookup[which(lookup$from=='Carol' & lookup$to == 'Bob'),'gain']))
)
library(gtools)
library(stringr)
con = file("input", "r")
lines <- lapply(readLines(con), function(line) {
str_match_all(line, "([A-Za-z]+) would (gain|lose) ([:digit:]+) happiness units by sitting next to ([A-Za-z]+)")[[1]][,-1]
})
rules <- lapply(lines, function(list) {
gain <- as.numeric(list[3])
if (list[2] == "lose") {
gain <- gain * -1
}
c(from=list[1], gain=gain, to=list[4])
})
lookup <- data.frame(
from = sapply(rules, function(rule) rule["from"]),
to = sapply(rules, function(rule) rule["to"]),
gain = sapply(rules, function(rule) rule["gain"])
)
gain <- function(from, to) {
as.numeric(as.character(lookup[which(lookup$from==from & lookup$to == to), 'gain']))
}
people <- levels(unique(lookup$from))
seats <- people[-1]
# circular permuations
seatings <- permutations(length(seats), length(seats), seats)
first_person <- matrix(rep(people[1], nrow(seatings)))
all_seatings = cbind(seatings, first_person)
apply(all_seatings, 1, function(row) {
cbind(row, c(row[-1], row[1]))
})
k <- all_seatings[1,]
k
row <- k
pairs <- cbind(row, c(row[-1], row[1]))
pairs
apply(pairs, 1, function(pair) { gain(pair[2], pair[1]) } )
apply(pairs, 1, function(pair) { gain(pair[2], pair[1]) + gain(pair[1], pair[2]) } )
apply(pairs, 1, function(pair) { gain(pair[1], pair[2]) } )
sum(apply(pairs, 1, function(pair) { gain(pair[2], pair[1]) + gain(pair[1], pair[2]) } ))
apply(all_seatings, 1, function(row) {
apply(cbind(row, c(row[-1], row[1])), 1, function(pair) { gain(pair[2], pair[1]) + gain(pair[1], pair[2]) } )
})
sum(apply(all_seatings, 1, function(row) {
apply(cbind(row, c(row[-1], row[1])), 1, function(pair) { gain(pair[2], pair[1]) + gain(pair[1], pair[2]) } )
}))
library(gtools)
library(stringr)
con = file("input", "r")
lines <- lapply(readLines(con), function(line) {
str_match_all(line, "([A-Za-z]+) would (gain|lose) ([:digit:]+) happiness units by sitting next to ([A-Za-z]+)")[[1]][,-1]
})
rules <- lapply(lines, function(list) {
gain <- as.numeric(list[3])
if (list[2] == "lose") {
gain <- gain * -1
}
c(from=list[1], gain=gain, to=list[4])
})
lookup <- data.frame(
from = sapply(rules, function(rule) rule["from"]),
to = sapply(rules, function(rule) rule["to"]),
gain = sapply(rules, function(rule) rule["gain"])
)
gain <- function(from, to) {
as.numeric(as.character(lookup[which(lookup$from==from & lookup$to == to), 'gain']))
}
people <- levels(unique(lookup$from))
seats <- people[-1]
# circular permuations
seatings <- permutations(length(seats), length(seats), seats)
first_person <- matrix(rep(people[1], nrow(seatings)))
all_seatings = cbind(seatings, first_person)
min(apply(all_seatings, 1, function(row) {
sum(apply(cbind(row, c(row[-1], row[1])), 1, function(pair) { gain(pair[2], pair[1]) + gain(pair[1], pair[2]) } ))
}))
library(gtools)
library(stringr)
con = file("input", "r")
lines <- lapply(readLines(con), function(line) {
str_match_all(line, "([A-Za-z]+) would (gain|lose) ([:digit:]+) happiness units by sitting next to ([A-Za-z]+)")[[1]][,-1]
})
rules <- lapply(lines, function(list) {
gain <- as.numeric(list[3])
if (list[2] == "lose") {
gain <- gain * -1
}
c(from=list[1], gain=gain, to=list[4])
})
lookup <- data.frame(
from = sapply(rules, function(rule) rule["from"]),
to = sapply(rules, function(rule) rule["to"]),
gain = sapply(rules, function(rule) rule["gain"])
)
gain <- function(from, to) {
as.numeric(as.character(lookup[which(lookup$from==from & lookup$to == to), 'gain']))
}
people <- levels(unique(lookup$from))
seats <- people[-1]
# circular permuations
seatings <- permutations(length(seats), length(seats), seats)
first_person <- matrix(rep(people[1], nrow(seatings)))
all_seatings = cbind(seatings, first_person)
min(apply(all_seatings, 1, function(row) {
sum(apply(cbind(row, c(row[-1], row[1])), 1, function(pair) { gain(pair[2], pair[1]) + gain(pair[1], pair[2]) } ))
}))
riw <- all_seatings[1,]
row <- all_seatings[1,]
pairs <- cbind(row, c(row[-1], row[1]))
sum(apply(pairs, 1, function(pair) { gain(pair[2], pair[1]) + gain(pair[1], pair[2]) } ))
pairs
apply(pairs, 1, function(pair) { gain(pair[2], pair[1]) + gain(pair[1], pair[2]) } )
apply(pairs, 1, function(pair) { gain(pair[2], pair[1]) } )
apply(pairs, 1, function(pair) { gain(pair[1], pair[2]) } )
library(gtools)
library(stringr)
con = file("input", "r")
lines <- lapply(readLines(con), function(line) {
str_match_all(line, "([A-Za-z]+) would (gain|lose) ([:digit:]+) happiness units by sitting next to ([A-Za-z]+)")[[1]][,-1]
})
rules <- lapply(lines, function(list) {
gain <- as.numeric(list[3])
if (list[2] == "lose") {
gain <- gain * -1
}
c(from=list[1], gain=gain, to=list[4])
})
lookup <- data.frame(
from = sapply(rules, function(rule) rule["from"]),
to = sapply(rules, function(rule) rule["to"]),
gain = sapply(rules, function(rule) rule["gain"])
)
gain <- function(from, to) {
as.numeric(as.character(lookup[which(lookup$from==from & lookup$to == to), 'gain']))
}
people <- levels(unique(lookup$from))
seats <- people[-1]
# circular permuations
seatings <- permutations(length(seats), length(seats), seats)
first_person <- matrix(rep(people[1], nrow(seatings)))
all_seatings = cbind(seatings, first_person)
max(apply(all_seatings, 1, function(row) {
sum(apply(cbind(row, c(row[-1], row[1])), 1, function(pair) { gain(pair[2], pair[1]) + gain(pair[1], pair[2]) } ))
}))
library(gtools)
library(stringr)
con = file("input", "r")
lines <- lapply(readLines(con), function(line) {
str_match_all(line, "([A-Za-z]+) would (gain|lose) ([:digit:]+) happiness units by sitting next to ([A-Za-z]+)")[[1]][,-1]
})
rules <- lapply(lines, function(list) {
gain <- as.numeric(list[3])
if (list[2] == "lose") {
gain <- gain * -1
}
c(from=list[1], gain=gain, to=list[4])
})
lookup <- data.frame(
from = sapply(rules, function(rule) rule["from"]),
to = sapply(rules, function(rule) rule["to"]),
gain = sapply(rules, function(rule) rule["gain"])
)
gain <- function(from, to) {
as.numeric(as.character(lookup[which(lookup$from==from & lookup$to == to), 'gain']))
}
people <- levels(unique(lookup$from))
seats <- people[-1]
# circular permuations
seatings <- permutations(length(seats), length(seats), seats)
first_person <- matrix(rep(people[1], nrow(seatings)))
all_seatings = cbind(seatings, first_person)
max(apply(all_seatings, 1, function(row) {
sum(apply(cbind(row, c(row[-1], row[1])), 1, function(pair) { gain(pair[2], pair[1]) + gain(pair[1], pair[2]) } ))
}))
library(gtools)
library(stringr)
con = file("input", "r")
lines <- lapply(readLines(con), function(line) {
str_match_all(line, "([A-Za-z]+) would (gain|lose) ([:digit:]+) happiness units by sitting next to ([A-Za-z]+)")[[1]][,-1]
})
rules <- lapply(lines, function(list) {
gain <- as.numeric(list[3])
if (list[2] == "lose") {
gain <- gain * -1
}
c(from=list[1], gain=gain, to=list[4])
})
lookup <- data.frame(
from = sapply(rules, function(rule) rule["from"]),
to = sapply(rules, function(rule) rule["to"]),
gain = sapply(rules, function(rule) rule["gain"])
)
gain <- function(from, to) {
as.numeric(as.character(lookup[which(lookup$from==from & lookup$to == to), 'gain']))
}
people <- levels(unique(lookup$from))
seats <- people[-1]
# circular permuations
seatings <- permutations(length(seats), length(seats), seats)
first_person <- matrix(rep(people[1], nrow(seatings)))
all_seatings = cbind(seatings, first_person)
max(apply(all_seatings, 1, function(row) {
sum(apply(cbind(row, c(row[-1], row[1])), 1, function(pair) { gain(pair[2], pair[1]) + gain(pair[1], pair[2]) } ))
}))
library(gtools)
library(stringr)
con = file("input", "r")
lines <- lapply(readLines(con), function(line) {
str_match_all(line, "([A-Za-z]+) would (gain|lose) ([:digit:]+) happiness units by sitting next to ([A-Za-z]+)")[[1]][,-1]
})
rules <- lapply(lines, function(list) {
gain <- as.numeric(list[3])
if (list[2] == "lose") {
gain <- gain * -1
}
c(from=list[1], gain=gain, to=list[4])
})
lookup <- data.frame(
from = sapply(rules, function(rule) rule["from"]),
to = sapply(rules, function(rule) rule["to"]),
gain = sapply(rules, function(rule) rule["gain"])
)
gain <- function(from, to) {
if (from == 'me' || to == 'me') {
0
} else {
as.numeric(as.character(lookup[which(lookup$from==from & lookup$to == to), 'gain']))
}
}
people <- levels(unique(lookup$from))
# circular permuations
seatings <- permutations(length(people), length(people), people)
first_person <- matrix(rep('me', nrow(seatings)))
all_seatings = cbind(seatings, first_person)
max(apply(all_seatings, 1, function(row) {
sum(apply(cbind(row, c(row[-1], row[1])), 1, function(pair) { gain(pair[2], pair[1]) + gain(pair[1], pair[2]) } ))
}))
